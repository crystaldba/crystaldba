name: Release

on:
  create

jobs:
  prepare:
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    outputs:
      release_tag: ${{ steps.get_tag.outputs.RELEASE_TAG }}
      prev_release_tag: ${{ steps.get_prev_tag.outputs.PREV_RELEASE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current tag
        id: get_tag
        run: |
          TAG=${GITHUB_REF##*/}
          STRIPPED_TAG=${TAG#v}
          echo "RELEASE_TAG=${STRIPPED_TAG}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${STRIPPED_TAG}" >> $GITHUB_OUTPUT

      - name: Get previous tag
        id: get_prev_tag
        run: |
          PREV_VERSION=$(grep -oP 'crystaldba-svc-\K[0-9]+\.[0-9]+\.[0-9]+(rc\d+)?$' "INSTALL-TEAM.md")
          echo "PREV_VERSION is \"$PREV_VERSION\""
          echo "PREV_RELEASE_TAG=${PREV_VERSION}" >> $GITHUB_ENV
          echo "PREV_RELEASE_TAG=${PREV_VERSION}" >> $GITHUB_OUTPUT

  build_server:
    needs: prepare
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for release
        run: |
          docker build -f Dockerfile . --target release --tag crystaldbarelease

      - name: Copy artifacts
        run: |
          docker run --rm -v ./release_output:/release_output crystaldbarelease /bin/bash -c "cp /home/crystaldba/release_output/* /release_output"

      - name: Upload server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-artifacts
          path: ./release_output/*

  # Client build jobs
  build_python:
    needs: prepare
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./agent
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "2.0.1"

      - name: Build Python Wheel
        run: cd agent && poetry build

      - name: Upload Python Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: crystaldba_cli-artifacts
          path: ./agent/dist/*

  create_release:
    needs: [prepare, build_server, build_python]
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract changelog for current release
        id: extract_changelog
        run: |
          # Strip the 'v' prefix from the tag
          TAG=${{ needs.prepare.outputs.release_tag }}
          # Extract everything between the current tag and the next tag or end of file
          sed -n "/## \[$TAG\]/,/## \[[0-9]\+\.[0-9]\+\.[0-9]\+\]/p" CHANGELOG.md | sed '$d' | sed '1d' > release_notes.md
          # If the release_notes.md file is empty, write a default message
          if [ ! -s release_notes.md ]; then
            echo "Automated release for tag ${{ github.ref }}" > release_notes.md
          fi

      - name: Update README
        uses: MathieuSoysal/file-updater-for-release@v1.0.3
        with:
          files: README.md scripts/install_release.sh agent/pyproject.toml INSTALL-TEAM.md
          version: ${{ needs.prepare.outputs.release_tag }}
          old-version: ${{ needs.prepare.outputs.prev_release_tag }}
          with-checkout: false
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.release_tag }}
          body_path: ./release_notes.md
          files: |
            ./artifacts/server-artifacts/*
            ./artifacts/crystaldba_cli-artifacts/*
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Switch to main
        id: switch_main
        run: |
          git fetch
          git checkout main
      
      - name: Push changes
        uses: EndBug/add-and-commit@v9
        with:
          committer_name: GitHub Actions
          committer_email: actions@github.com
          add: README.md scripts/install_release.sh agent/pyproject.toml INSTALL-TEAM.md
          message: 'Updated the current version for the new release.'
